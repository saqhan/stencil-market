/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { footerContactColumnInterface, footerCopyrightRowInterface, footerDataInterface, footerItemsInterface, footerLinksPoliticsInterface, footerMenuInterface, MarketAppInterface, MarketCartProductsInterface, MarketChoiceInterface, MarketCitiesInterface, MarketCourierInterface, MarketDeliveryInterface, MarketFeaturedProductInterface, MarketGetProductInterface, MarketGetRecommendedInterface, MarketGetSpecificationInterface, MarketLeftMenuCatalogInterface as MarketLeftMenuCatalogInterface1, MarketLoginAndRegistrationInterface, MarketLoginInterface, MarketOfferInterface, MarketProductBlockInterface, MarketProductDataInterface, MarketProductListCardInterface, MarketProductListInterface, MarketProductModalInterface, MarketProductPageInterface, MarketProductsPageFilterInterface, MarketProductsSliderCardsInterface, MarketPromoSliderInterface, MarketRecentlyWatchedProductsInterface, MarketRecommendedBlockInterface, MarketRegistrationInterface, MarketRemindPasswordInterface, MarketSelectionInterface, MarketSelectShopsInterface as MarketSelectShopsInterface1, MarketSpecialistInterface, MarketSpecificationBlockInterface, MarketStatisticsInterface, MarketTopBarInterface, MarketTopBarModalDeliveryInterface, MarketTopBarModalInterface, MarketTopBarModalPickUpInterface, MarketUsersArrInterface, NavMenuItemInterface, } from "./index";
import { MarketLeftMenuCatalogInterface, MarketNavBarInterface, MarketSelectShopsInterface, } from ".";
export namespace Components {
    interface GroupA {
    }
    interface GroupB {
    }
    interface MyComponent {
    }
    interface SCntMarketAccountMenu {
    }
    interface SCntMarketApp {
        /**
          * Данные для компонента app
         */
        "forApp": MarketAppInterface;
    }
    interface SCntMarketBackToTop {
    }
    interface SCntMarketBasket {
        /**
          * Продукты из корзины
         */
        "marketCartProducts": MarketCartProductsInterface[];
        /**
          * Стейт на состояние корзины открыто/закрыто
         */
        "openedBasket": boolean;
    }
    interface SCntMarketChoice {
        /**
          * Данные для заголовка
         */
        "choiceTitleText": string;
        /**
          * Данные для компонента Choice
         */
        "forChoice": MarketChoiceInterface[];
    }
    interface SCntMarketCourier {
        /**
          * Данные для компонента Choice
         */
        "forCourier": MarketCourierInterface[];
    }
    interface SCntMarketDelivery {
        /**
          * Данные для компонента delivery
         */
        "delivery": MarketDeliveryInterface;
    }
    interface SCntMarketDeliveryInModal {
        /**
          * Props значение для принятия и вывода данных
         */
        "deliveryData": MarketTopBarModalDeliveryInterface;
    }
    interface SCntMarketDeliveryItem {
        /**
          * Список городов
         */
        "delivery": MarketCitiesInterface;
    }
    interface SCntMarketDeliveryModal {
        /**
          * boolean значение для вывода/закрытия блока доставки и присвоения класса
         */
        "delivery": boolean;
        /**
          * объект из mock для вывода данных в компоненте модального окна
         */
        "modalData": MarketTopBarModalInterface;
        /**
          * boolean значение для вывода/закрытия блока самовывоза и присвоения класса
         */
        "pickUp": boolean;
    }
    interface SCntMarketDownFooter {
        /**
          * Данные для DownFooter
         */
        "footerCopyrightRow": footerCopyrightRowInterface;
    }
    interface SCntMarketFavoriteProducts {
    }
    interface SCntMarketFirstPage {
    }
    interface SCntMarketFooter {
        /**
          * Данные для всего футера
         */
        "footerData": footerDataInterface;
    }
    interface SCntMarketFooterInfo {
        /**
          * Данные для вывода в блок
         */
        "footerLinksPolitics": footerLinksPoliticsInterface;
    }
    interface SCntMarketFooterInfoItem {
        /**
          * Данные для политики безопасности
         */
        "footerLinksPolitics": footerLinksPoliticsInterface;
    }
    interface SCntMarketFooterItems {
        /**
          * элементы списка меню
         */
        "footerItems": footerItemsInterface;
    }
    interface SCntMarketFooterModalForm {
        /**
          * show modal form
         */
        "showModalForm": boolean;
    }
    interface SCntMarketHeader {
        /**
          * Массив данных для хедера
         */
        "categories": any;
        /**
          * Данные об авторизации пользователя
         */
        "login": boolean;
    }
    interface SCntMarketHeaderBase {
        "logo": string;
        "number": string;
    }
    interface SCntMarketHeaderBody {
        /**
          * Элементы для навигации
         */
        "body": NavMenuItemInterface;
    }
    interface SCntMarketHeaderNav {
        /**
          * Данные для магазинов из каталога
         */
        "leftMenuCatalogArr": MarketLeftMenuCatalogInterface[];
        /**
          * Log in user
         */
        "login": boolean;
        "navBar": MarketNavBarInterface;
        /**
          * магазины для вашего города
         */
        "selectShops": MarketSelectShopsInterface[];
    }
    interface SCntMarketHeaderWrapper {
        /**
          * Массив данных для хедера
         */
        "categories": any;
        /**
          * Первоначальная страница
         */
        "firstPage": boolean;
        /**
          * Авторизация юзера
         */
        "login": boolean;
    }
    interface SCntMarketItemChoice {
        /**
          * Данные для компонента Choice
         */
        "forChoice": MarketChoiceInterface;
        /**
          * Данные для компонента Specialist
         */
        "forSpecialist": MarketSpecialistInterface;
    }
    interface SCntMarketItemCourier {
        /**
          * Данные для компонента Choice
         */
        "forCourier": MarketCourierInterface;
    }
    interface SCntMarketItemOffer {
        /**
          * Данные для компонента Item Offer
         */
        "forOffer": MarketOfferInterface;
    }
    interface SCntMarketItemRecommended {
        /**
          * Данные для Item-Recommended
         */
        "getRecommended": MarketFeaturedProductInterface;
    }
    interface SCntMarketItemSelection {
        /**
          * Данные для карточек магазинов
         */
        "forSelection": MarketSelectionInterface;
    }
    interface SCntMarketItemSpecialist {
        /**
          * Данные для компонента Specialist
         */
        "forSpecialist": MarketSpecialistInterface;
    }
    interface SCntMarketItemStatistics {
        /**
          * Данные для компонента Statistics
         */
        "forStatistics": MarketStatisticsInterface;
    }
    interface SCntMarketLeftMenuCatalog {
        /**
          * массив магазинов для вывода
         */
        "leftMenuCatalogArr": MarketLeftMenuCatalogInterface[];
        /**
          * стейт на состояние меню
         */
        "openedLeftMenu": boolean;
    }
    interface SCntMarketLoginAndRegistrationForm {
        /**
          * значения для присвоения ширины блока
         */
        "blockWidth": string;
        /**
          * boolean значение для вывода/закрытия блока входа и присвоения класса
         */
        "login": boolean;
        /**
          * объект данных для компонента LoginAndRegistrationForm и его подкомпонентов
         */
        "loginAndRegistration": MarketLoginAndRegistrationInterface;
        /**
          * boolean значение для вывода/закрытия блока регистрации и присвоения класса
         */
        "registration": boolean;
    }
    interface SCntMarketLoginForm {
        /**
          * объект данных для компонента входа
         */
        "login": MarketLoginInterface;
        /**
          * массив с данными пользователей
         */
        "users": MarketUsersArrInterface[];
    }
    interface SCntMarketModalWindow {
        "productData": MarketProductDataInterface;
        /**
          * Данные для модального окна
         */
        "productModal": MarketProductModalInterface;
    }
    interface SCntMarketOffer {
        /**
          * Данные для компонента Offer
         */
        "forOffer": MarketOfferInterface[];
        /**
          * Данные для заголовка
         */
        "offerTitleText": string;
    }
    interface SCntMarketOrdering {
    }
    interface SCntMarketOrderingColumn {
        /**
          * Данные для панелей
         */
        "ordering": any;
    }
    interface SCntMarketOrderingContacts {
        /**
          * Стейт для переключения класса active
         */
        "addOrRemoveClassState": boolean;
        /**
          * Данные для панели контакты
         */
        "contacts": any;
    }
    interface SCntMarketOrderingFinal {
        /**
          * Текст для блока "оформить заказ"
         */
        "final": any;
    }
    interface SCntMarketOrderingHeader {
        "logo": string;
    }
    interface SCntMarketOrderingMethod {
        /**
          * Стейт для переключения класса active
         */
        "addOrRemoveClassState": boolean;
        /**
          * Данные для панели метод получения
         */
        "method": any;
    }
    interface SCntMarketOrderingPayment {
        /**
          * Стейт для переключения класса active
         */
        "addOrRemoveClassState": boolean;
        /**
          * Данные для панели метод получения
         */
        "payment": any;
    }
    interface SCntMarketOrderingPaymentOnline {
        /**
          * Данные для раздела онлайн оплата
         */
        "online": any;
    }
    interface SCntMarketOrderingPaymentTransfer {
        /**
          * данные для блока оплата переводом
         */
        "transfer": any;
    }
    interface SCntMarketOrderingReplacementPolicy {
        /**
          * Данные для панелей политика доставки
         */
        "panels": any;
    }
    interface SCntMarketOrderingReplacements {
        /**
          * Стейт для переключения класса active
         */
        "addOrRemoveClassState": boolean;
        /**
          * Данные для панели метод получения
         */
        "replacements": any;
    }
    interface SCntMarketOrderingSidebar {
    }
    interface SCntMarketOrderingTimeOfReceipt {
        /**
          * Стейт для переключения класса active
         */
        "addOrRemoveClassState": boolean;
        /**
          * Данные для панели метод получения
         */
        "timetable": any;
    }
    interface SCntMarketOrderingTimePanelItem {
        /**
          * Время заказа
         */
        "time": any;
    }
    interface SCntMarketOrderingTimePanelTab {
        /**
          * Дата и день недели
         */
        "date": any;
    }
    interface SCntMarketOrdersWrapper {
    }
    interface SCntMarketPickupInModal {
        /**
          * Данные из объекта мок
         */
        "pickUpData": MarketTopBarModalPickUpInterface;
    }
    interface SCntMarketProduct {
        /**
          * Данные для Product
         */
        "getProduct": MarketGetProductInterface;
        /**
          * Данные для Product
         */
        "productBlock": MarketProductBlockInterface;
    }
    interface SCntMarketProductFilterSaidBar {
        /**
          * Данные для вывода брендов
         */
        "brands": MarketProductListInterface;
        /**
          * checked для смены класса и показа товаров со скидкой
         */
        "checkedDesc": boolean;
        /**
          * Данные объекта для заполнения компонента
         */
        "productFilter": MarketProductsPageFilterInterface;
    }
    interface SCntMarketProductPage {
        /**
          * Данные для списка товаров
         */
        "productsList": MarketProductListInterface[];
        /**
          * Данные объекта для заполнения компонента
         */
        "productsPage": MarketProductPageInterface;
        /**
          * Данные карточек слайдера популярных продуктов
         */
        "productsSliderCards": MarketProductsSliderCardsInterface[];
        /**
          * Заголовк слайдера
         */
        "productsSliderTitle": string;
        /**
          * Принимает id выбранной категории для вывода ее товаров
         */
        "selectedCategoryId": number;
    }
    interface SCntMarketProductsList {
        /**
          * Данные для списка товаров
         */
        "productsList": MarketProductListInterface[];
    }
    interface SCntMarketProductsListCard {
        /**
          * Данные для списка товаров
         */
        "productsList": MarketProductListInterface;
    }
    interface SCntMarketProductsListItem {
        /**
          * Данные для карточки товара
         */
        "productsListCard": MarketProductListCardInterface;
    }
    interface SCntMarketProductsSlider {
        /**
          * Данные карточек слайдера популярных продуктов
         */
        "productsSliderCards": MarketProductsSliderCardsInterface[];
        /**
          * Заголовк слайдера
         */
        "productsSliderTitle": string;
        /**
          * обертка для слайдера товара
         */
        "theme": "main-container" | "cart";
    }
    interface SCntMarketProductsSliderCard {
        /**
          * Получаем данные карточек слайдера популярных продуктов
         */
        "productsSliderCards": MarketProductsSliderCardsInterface;
    }
    interface SCntMarketPromoSlider {
        /**
          * Получаем данные карточек промо-слайдера
         */
        "promoSliderCards": MarketPromoSliderInterface[];
    }
    interface SCntMarketPromoSliderCard {
        /**
          * Получаем данные карточек промо-слайдера
         */
        "promoSliderCards": MarketPromoSliderInterface;
    }
    interface SCntMarketRecentlyWatched {
        /**
          * Данные карточек слайдера просмотренных товаров
         */
        "recentlyWatchedProducts": MarketRecentlyWatchedProductsInterface[];
        /**
          * Заголовк раздела
         */
        "recentlyWatchedTitle": string;
    }
    interface SCntMarketRecentlyWatchedCard {
        /**
          * Данные карточек слайдера просмотренных товаров
         */
        "recentlyWatchedProducts": MarketRecentlyWatchedProductsInterface;
    }
    interface SCntMarketRecommended {
        /**
          * Данные для Recommended
         */
        "getRecommended": MarketGetRecommendedInterface;
        /**
          * Данные для Recommended
         */
        "recommendedBlock": MarketRecommendedBlockInterface;
    }
    interface SCntMarketRegistrationForm {
        /**
          * объект данных для компонента регистрации
         */
        "reg": MarketRegistrationInterface;
        /**
          * массив с данными пользователей
         */
        "users": MarketUsersArrInterface[];
    }
    interface SCntMarketRemindPassword {
        /**
          * boolean значение
         */
        "backBtn": boolean;
        /**
          * объект данных для компонента входа
         */
        "remindPass": MarketRemindPasswordInterface;
        /**
          * массив с данными пользователей
         */
        "users": MarketUsersArrInterface[];
    }
    interface SCntMarketSelection {
        /**
          * Данные для карточек магазинов
         */
        "forSelection": MarketSelectionInterface[];
        /**
          * Данные для главной картинки
         */
        "homePageImage": string;
        /**
          * Данные для подзаголовка на картинке
         */
        "homeSubText": string;
        /**
          * Данные для заголовка на картинке
         */
        "homeText": string;
    }
    interface SCntMarketShipments {
    }
    interface SCntMarketShop {
    }
    interface SCntMarketSpecialist {
        /**
          * Данные для компонента Specialist
         */
        "forSpecialist": MarketSpecialistInterface[];
    }
    interface SCntMarketSpecification {
        /**
          * Данные для Specification
         */
        "getSpecification": MarketGetSpecificationInterface;
        /**
          * Данные для Specification
         */
        "specificationBlock": MarketSpecificationBlockInterface;
    }
    interface SCntMarketStatistics {
        /**
          * Данные для компонента Statistics
         */
        "forStatistics": MarketStatisticsInterface[];
    }
    interface SCntMarketStoreSelectTop {
        /**
          * состояние модалки
         */
        "openedStoreSelect": boolean;
        /**
          * selectShops
         */
        "selectShops": MarketSelectShopsInterface[];
    }
    interface SCntMarketTopBar {
        /**
          * объект данных для компонента top-bar и его подкомпонентов
         */
        "topBar": MarketTopBarInterface;
    }
    interface SCntMarketUpFooter {
        /**
          * Данные для элементов меню в подвале
         */
        "footerMenu": footerMenuInterface;
    }
    interface SCntMarketUpFooterForm {
        /**
          * Контактные данные для 4 колонки в футере
         */
        "footerContactColumn": footerContactColumnInterface;
    }
    interface SCntMarketUserAccount {
    }
}
declare global {
    interface HTMLGroupAElement extends Components.GroupA, HTMLStencilElement {
    }
    var HTMLGroupAElement: {
        prototype: HTMLGroupAElement;
        new (): HTMLGroupAElement;
    };
    interface HTMLGroupBElement extends Components.GroupB, HTMLStencilElement {
    }
    var HTMLGroupBElement: {
        prototype: HTMLGroupBElement;
        new (): HTMLGroupBElement;
    };
    interface HTMLMyComponentElement extends Components.MyComponent, HTMLStencilElement {
    }
    var HTMLMyComponentElement: {
        prototype: HTMLMyComponentElement;
        new (): HTMLMyComponentElement;
    };
    interface HTMLSCntMarketAccountMenuElement extends Components.SCntMarketAccountMenu, HTMLStencilElement {
    }
    var HTMLSCntMarketAccountMenuElement: {
        prototype: HTMLSCntMarketAccountMenuElement;
        new (): HTMLSCntMarketAccountMenuElement;
    };
    interface HTMLSCntMarketAppElement extends Components.SCntMarketApp, HTMLStencilElement {
    }
    var HTMLSCntMarketAppElement: {
        prototype: HTMLSCntMarketAppElement;
        new (): HTMLSCntMarketAppElement;
    };
    interface HTMLSCntMarketBackToTopElement extends Components.SCntMarketBackToTop, HTMLStencilElement {
    }
    var HTMLSCntMarketBackToTopElement: {
        prototype: HTMLSCntMarketBackToTopElement;
        new (): HTMLSCntMarketBackToTopElement;
    };
    interface HTMLSCntMarketBasketElement extends Components.SCntMarketBasket, HTMLStencilElement {
    }
    var HTMLSCntMarketBasketElement: {
        prototype: HTMLSCntMarketBasketElement;
        new (): HTMLSCntMarketBasketElement;
    };
    interface HTMLSCntMarketChoiceElement extends Components.SCntMarketChoice, HTMLStencilElement {
    }
    var HTMLSCntMarketChoiceElement: {
        prototype: HTMLSCntMarketChoiceElement;
        new (): HTMLSCntMarketChoiceElement;
    };
    interface HTMLSCntMarketCourierElement extends Components.SCntMarketCourier, HTMLStencilElement {
    }
    var HTMLSCntMarketCourierElement: {
        prototype: HTMLSCntMarketCourierElement;
        new (): HTMLSCntMarketCourierElement;
    };
    interface HTMLSCntMarketDeliveryElement extends Components.SCntMarketDelivery, HTMLStencilElement {
    }
    var HTMLSCntMarketDeliveryElement: {
        prototype: HTMLSCntMarketDeliveryElement;
        new (): HTMLSCntMarketDeliveryElement;
    };
    interface HTMLSCntMarketDeliveryInModalElement extends Components.SCntMarketDeliveryInModal, HTMLStencilElement {
    }
    var HTMLSCntMarketDeliveryInModalElement: {
        prototype: HTMLSCntMarketDeliveryInModalElement;
        new (): HTMLSCntMarketDeliveryInModalElement;
    };
    interface HTMLSCntMarketDeliveryItemElement extends Components.SCntMarketDeliveryItem, HTMLStencilElement {
    }
    var HTMLSCntMarketDeliveryItemElement: {
        prototype: HTMLSCntMarketDeliveryItemElement;
        new (): HTMLSCntMarketDeliveryItemElement;
    };
    interface HTMLSCntMarketDeliveryModalElement extends Components.SCntMarketDeliveryModal, HTMLStencilElement {
    }
    var HTMLSCntMarketDeliveryModalElement: {
        prototype: HTMLSCntMarketDeliveryModalElement;
        new (): HTMLSCntMarketDeliveryModalElement;
    };
    interface HTMLSCntMarketDownFooterElement extends Components.SCntMarketDownFooter, HTMLStencilElement {
    }
    var HTMLSCntMarketDownFooterElement: {
        prototype: HTMLSCntMarketDownFooterElement;
        new (): HTMLSCntMarketDownFooterElement;
    };
    interface HTMLSCntMarketFavoriteProductsElement extends Components.SCntMarketFavoriteProducts, HTMLStencilElement {
    }
    var HTMLSCntMarketFavoriteProductsElement: {
        prototype: HTMLSCntMarketFavoriteProductsElement;
        new (): HTMLSCntMarketFavoriteProductsElement;
    };
    interface HTMLSCntMarketFirstPageElement extends Components.SCntMarketFirstPage, HTMLStencilElement {
    }
    var HTMLSCntMarketFirstPageElement: {
        prototype: HTMLSCntMarketFirstPageElement;
        new (): HTMLSCntMarketFirstPageElement;
    };
    interface HTMLSCntMarketFooterElement extends Components.SCntMarketFooter, HTMLStencilElement {
    }
    var HTMLSCntMarketFooterElement: {
        prototype: HTMLSCntMarketFooterElement;
        new (): HTMLSCntMarketFooterElement;
    };
    interface HTMLSCntMarketFooterInfoElement extends Components.SCntMarketFooterInfo, HTMLStencilElement {
    }
    var HTMLSCntMarketFooterInfoElement: {
        prototype: HTMLSCntMarketFooterInfoElement;
        new (): HTMLSCntMarketFooterInfoElement;
    };
    interface HTMLSCntMarketFooterInfoItemElement extends Components.SCntMarketFooterInfoItem, HTMLStencilElement {
    }
    var HTMLSCntMarketFooterInfoItemElement: {
        prototype: HTMLSCntMarketFooterInfoItemElement;
        new (): HTMLSCntMarketFooterInfoItemElement;
    };
    interface HTMLSCntMarketFooterItemsElement extends Components.SCntMarketFooterItems, HTMLStencilElement {
    }
    var HTMLSCntMarketFooterItemsElement: {
        prototype: HTMLSCntMarketFooterItemsElement;
        new (): HTMLSCntMarketFooterItemsElement;
    };
    interface HTMLSCntMarketFooterModalFormElement extends Components.SCntMarketFooterModalForm, HTMLStencilElement {
    }
    var HTMLSCntMarketFooterModalFormElement: {
        prototype: HTMLSCntMarketFooterModalFormElement;
        new (): HTMLSCntMarketFooterModalFormElement;
    };
    interface HTMLSCntMarketHeaderElement extends Components.SCntMarketHeader, HTMLStencilElement {
    }
    var HTMLSCntMarketHeaderElement: {
        prototype: HTMLSCntMarketHeaderElement;
        new (): HTMLSCntMarketHeaderElement;
    };
    interface HTMLSCntMarketHeaderBaseElement extends Components.SCntMarketHeaderBase, HTMLStencilElement {
    }
    var HTMLSCntMarketHeaderBaseElement: {
        prototype: HTMLSCntMarketHeaderBaseElement;
        new (): HTMLSCntMarketHeaderBaseElement;
    };
    interface HTMLSCntMarketHeaderBodyElement extends Components.SCntMarketHeaderBody, HTMLStencilElement {
    }
    var HTMLSCntMarketHeaderBodyElement: {
        prototype: HTMLSCntMarketHeaderBodyElement;
        new (): HTMLSCntMarketHeaderBodyElement;
    };
    interface HTMLSCntMarketHeaderNavElement extends Components.SCntMarketHeaderNav, HTMLStencilElement {
    }
    var HTMLSCntMarketHeaderNavElement: {
        prototype: HTMLSCntMarketHeaderNavElement;
        new (): HTMLSCntMarketHeaderNavElement;
    };
    interface HTMLSCntMarketHeaderWrapperElement extends Components.SCntMarketHeaderWrapper, HTMLStencilElement {
    }
    var HTMLSCntMarketHeaderWrapperElement: {
        prototype: HTMLSCntMarketHeaderWrapperElement;
        new (): HTMLSCntMarketHeaderWrapperElement;
    };
    interface HTMLSCntMarketItemChoiceElement extends Components.SCntMarketItemChoice, HTMLStencilElement {
    }
    var HTMLSCntMarketItemChoiceElement: {
        prototype: HTMLSCntMarketItemChoiceElement;
        new (): HTMLSCntMarketItemChoiceElement;
    };
    interface HTMLSCntMarketItemCourierElement extends Components.SCntMarketItemCourier, HTMLStencilElement {
    }
    var HTMLSCntMarketItemCourierElement: {
        prototype: HTMLSCntMarketItemCourierElement;
        new (): HTMLSCntMarketItemCourierElement;
    };
    interface HTMLSCntMarketItemOfferElement extends Components.SCntMarketItemOffer, HTMLStencilElement {
    }
    var HTMLSCntMarketItemOfferElement: {
        prototype: HTMLSCntMarketItemOfferElement;
        new (): HTMLSCntMarketItemOfferElement;
    };
    interface HTMLSCntMarketItemRecommendedElement extends Components.SCntMarketItemRecommended, HTMLStencilElement {
    }
    var HTMLSCntMarketItemRecommendedElement: {
        prototype: HTMLSCntMarketItemRecommendedElement;
        new (): HTMLSCntMarketItemRecommendedElement;
    };
    interface HTMLSCntMarketItemSelectionElement extends Components.SCntMarketItemSelection, HTMLStencilElement {
    }
    var HTMLSCntMarketItemSelectionElement: {
        prototype: HTMLSCntMarketItemSelectionElement;
        new (): HTMLSCntMarketItemSelectionElement;
    };
    interface HTMLSCntMarketItemSpecialistElement extends Components.SCntMarketItemSpecialist, HTMLStencilElement {
    }
    var HTMLSCntMarketItemSpecialistElement: {
        prototype: HTMLSCntMarketItemSpecialistElement;
        new (): HTMLSCntMarketItemSpecialistElement;
    };
    interface HTMLSCntMarketItemStatisticsElement extends Components.SCntMarketItemStatistics, HTMLStencilElement {
    }
    var HTMLSCntMarketItemStatisticsElement: {
        prototype: HTMLSCntMarketItemStatisticsElement;
        new (): HTMLSCntMarketItemStatisticsElement;
    };
    interface HTMLSCntMarketLeftMenuCatalogElement extends Components.SCntMarketLeftMenuCatalog, HTMLStencilElement {
    }
    var HTMLSCntMarketLeftMenuCatalogElement: {
        prototype: HTMLSCntMarketLeftMenuCatalogElement;
        new (): HTMLSCntMarketLeftMenuCatalogElement;
    };
    interface HTMLSCntMarketLoginAndRegistrationFormElement extends Components.SCntMarketLoginAndRegistrationForm, HTMLStencilElement {
    }
    var HTMLSCntMarketLoginAndRegistrationFormElement: {
        prototype: HTMLSCntMarketLoginAndRegistrationFormElement;
        new (): HTMLSCntMarketLoginAndRegistrationFormElement;
    };
    interface HTMLSCntMarketLoginFormElement extends Components.SCntMarketLoginForm, HTMLStencilElement {
    }
    var HTMLSCntMarketLoginFormElement: {
        prototype: HTMLSCntMarketLoginFormElement;
        new (): HTMLSCntMarketLoginFormElement;
    };
    interface HTMLSCntMarketModalWindowElement extends Components.SCntMarketModalWindow, HTMLStencilElement {
    }
    var HTMLSCntMarketModalWindowElement: {
        prototype: HTMLSCntMarketModalWindowElement;
        new (): HTMLSCntMarketModalWindowElement;
    };
    interface HTMLSCntMarketOfferElement extends Components.SCntMarketOffer, HTMLStencilElement {
    }
    var HTMLSCntMarketOfferElement: {
        prototype: HTMLSCntMarketOfferElement;
        new (): HTMLSCntMarketOfferElement;
    };
    interface HTMLSCntMarketOrderingElement extends Components.SCntMarketOrdering, HTMLStencilElement {
    }
    var HTMLSCntMarketOrderingElement: {
        prototype: HTMLSCntMarketOrderingElement;
        new (): HTMLSCntMarketOrderingElement;
    };
    interface HTMLSCntMarketOrderingColumnElement extends Components.SCntMarketOrderingColumn, HTMLStencilElement {
    }
    var HTMLSCntMarketOrderingColumnElement: {
        prototype: HTMLSCntMarketOrderingColumnElement;
        new (): HTMLSCntMarketOrderingColumnElement;
    };
    interface HTMLSCntMarketOrderingContactsElement extends Components.SCntMarketOrderingContacts, HTMLStencilElement {
    }
    var HTMLSCntMarketOrderingContactsElement: {
        prototype: HTMLSCntMarketOrderingContactsElement;
        new (): HTMLSCntMarketOrderingContactsElement;
    };
    interface HTMLSCntMarketOrderingFinalElement extends Components.SCntMarketOrderingFinal, HTMLStencilElement {
    }
    var HTMLSCntMarketOrderingFinalElement: {
        prototype: HTMLSCntMarketOrderingFinalElement;
        new (): HTMLSCntMarketOrderingFinalElement;
    };
    interface HTMLSCntMarketOrderingHeaderElement extends Components.SCntMarketOrderingHeader, HTMLStencilElement {
    }
    var HTMLSCntMarketOrderingHeaderElement: {
        prototype: HTMLSCntMarketOrderingHeaderElement;
        new (): HTMLSCntMarketOrderingHeaderElement;
    };
    interface HTMLSCntMarketOrderingMethodElement extends Components.SCntMarketOrderingMethod, HTMLStencilElement {
    }
    var HTMLSCntMarketOrderingMethodElement: {
        prototype: HTMLSCntMarketOrderingMethodElement;
        new (): HTMLSCntMarketOrderingMethodElement;
    };
    interface HTMLSCntMarketOrderingPaymentElement extends Components.SCntMarketOrderingPayment, HTMLStencilElement {
    }
    var HTMLSCntMarketOrderingPaymentElement: {
        prototype: HTMLSCntMarketOrderingPaymentElement;
        new (): HTMLSCntMarketOrderingPaymentElement;
    };
    interface HTMLSCntMarketOrderingPaymentOnlineElement extends Components.SCntMarketOrderingPaymentOnline, HTMLStencilElement {
    }
    var HTMLSCntMarketOrderingPaymentOnlineElement: {
        prototype: HTMLSCntMarketOrderingPaymentOnlineElement;
        new (): HTMLSCntMarketOrderingPaymentOnlineElement;
    };
    interface HTMLSCntMarketOrderingPaymentTransferElement extends Components.SCntMarketOrderingPaymentTransfer, HTMLStencilElement {
    }
    var HTMLSCntMarketOrderingPaymentTransferElement: {
        prototype: HTMLSCntMarketOrderingPaymentTransferElement;
        new (): HTMLSCntMarketOrderingPaymentTransferElement;
    };
    interface HTMLSCntMarketOrderingReplacementPolicyElement extends Components.SCntMarketOrderingReplacementPolicy, HTMLStencilElement {
    }
    var HTMLSCntMarketOrderingReplacementPolicyElement: {
        prototype: HTMLSCntMarketOrderingReplacementPolicyElement;
        new (): HTMLSCntMarketOrderingReplacementPolicyElement;
    };
    interface HTMLSCntMarketOrderingReplacementsElement extends Components.SCntMarketOrderingReplacements, HTMLStencilElement {
    }
    var HTMLSCntMarketOrderingReplacementsElement: {
        prototype: HTMLSCntMarketOrderingReplacementsElement;
        new (): HTMLSCntMarketOrderingReplacementsElement;
    };
    interface HTMLSCntMarketOrderingSidebarElement extends Components.SCntMarketOrderingSidebar, HTMLStencilElement {
    }
    var HTMLSCntMarketOrderingSidebarElement: {
        prototype: HTMLSCntMarketOrderingSidebarElement;
        new (): HTMLSCntMarketOrderingSidebarElement;
    };
    interface HTMLSCntMarketOrderingTimeOfReceiptElement extends Components.SCntMarketOrderingTimeOfReceipt, HTMLStencilElement {
    }
    var HTMLSCntMarketOrderingTimeOfReceiptElement: {
        prototype: HTMLSCntMarketOrderingTimeOfReceiptElement;
        new (): HTMLSCntMarketOrderingTimeOfReceiptElement;
    };
    interface HTMLSCntMarketOrderingTimePanelItemElement extends Components.SCntMarketOrderingTimePanelItem, HTMLStencilElement {
    }
    var HTMLSCntMarketOrderingTimePanelItemElement: {
        prototype: HTMLSCntMarketOrderingTimePanelItemElement;
        new (): HTMLSCntMarketOrderingTimePanelItemElement;
    };
    interface HTMLSCntMarketOrderingTimePanelTabElement extends Components.SCntMarketOrderingTimePanelTab, HTMLStencilElement {
    }
    var HTMLSCntMarketOrderingTimePanelTabElement: {
        prototype: HTMLSCntMarketOrderingTimePanelTabElement;
        new (): HTMLSCntMarketOrderingTimePanelTabElement;
    };
    interface HTMLSCntMarketOrdersWrapperElement extends Components.SCntMarketOrdersWrapper, HTMLStencilElement {
    }
    var HTMLSCntMarketOrdersWrapperElement: {
        prototype: HTMLSCntMarketOrdersWrapperElement;
        new (): HTMLSCntMarketOrdersWrapperElement;
    };
    interface HTMLSCntMarketPickupInModalElement extends Components.SCntMarketPickupInModal, HTMLStencilElement {
    }
    var HTMLSCntMarketPickupInModalElement: {
        prototype: HTMLSCntMarketPickupInModalElement;
        new (): HTMLSCntMarketPickupInModalElement;
    };
    interface HTMLSCntMarketProductElement extends Components.SCntMarketProduct, HTMLStencilElement {
    }
    var HTMLSCntMarketProductElement: {
        prototype: HTMLSCntMarketProductElement;
        new (): HTMLSCntMarketProductElement;
    };
    interface HTMLSCntMarketProductFilterSaidBarElement extends Components.SCntMarketProductFilterSaidBar, HTMLStencilElement {
    }
    var HTMLSCntMarketProductFilterSaidBarElement: {
        prototype: HTMLSCntMarketProductFilterSaidBarElement;
        new (): HTMLSCntMarketProductFilterSaidBarElement;
    };
    interface HTMLSCntMarketProductPageElement extends Components.SCntMarketProductPage, HTMLStencilElement {
    }
    var HTMLSCntMarketProductPageElement: {
        prototype: HTMLSCntMarketProductPageElement;
        new (): HTMLSCntMarketProductPageElement;
    };
    interface HTMLSCntMarketProductsListElement extends Components.SCntMarketProductsList, HTMLStencilElement {
    }
    var HTMLSCntMarketProductsListElement: {
        prototype: HTMLSCntMarketProductsListElement;
        new (): HTMLSCntMarketProductsListElement;
    };
    interface HTMLSCntMarketProductsListCardElement extends Components.SCntMarketProductsListCard, HTMLStencilElement {
    }
    var HTMLSCntMarketProductsListCardElement: {
        prototype: HTMLSCntMarketProductsListCardElement;
        new (): HTMLSCntMarketProductsListCardElement;
    };
    interface HTMLSCntMarketProductsListItemElement extends Components.SCntMarketProductsListItem, HTMLStencilElement {
    }
    var HTMLSCntMarketProductsListItemElement: {
        prototype: HTMLSCntMarketProductsListItemElement;
        new (): HTMLSCntMarketProductsListItemElement;
    };
    interface HTMLSCntMarketProductsSliderElement extends Components.SCntMarketProductsSlider, HTMLStencilElement {
    }
    var HTMLSCntMarketProductsSliderElement: {
        prototype: HTMLSCntMarketProductsSliderElement;
        new (): HTMLSCntMarketProductsSliderElement;
    };
    interface HTMLSCntMarketProductsSliderCardElement extends Components.SCntMarketProductsSliderCard, HTMLStencilElement {
    }
    var HTMLSCntMarketProductsSliderCardElement: {
        prototype: HTMLSCntMarketProductsSliderCardElement;
        new (): HTMLSCntMarketProductsSliderCardElement;
    };
    interface HTMLSCntMarketPromoSliderElement extends Components.SCntMarketPromoSlider, HTMLStencilElement {
    }
    var HTMLSCntMarketPromoSliderElement: {
        prototype: HTMLSCntMarketPromoSliderElement;
        new (): HTMLSCntMarketPromoSliderElement;
    };
    interface HTMLSCntMarketPromoSliderCardElement extends Components.SCntMarketPromoSliderCard, HTMLStencilElement {
    }
    var HTMLSCntMarketPromoSliderCardElement: {
        prototype: HTMLSCntMarketPromoSliderCardElement;
        new (): HTMLSCntMarketPromoSliderCardElement;
    };
    interface HTMLSCntMarketRecentlyWatchedElement extends Components.SCntMarketRecentlyWatched, HTMLStencilElement {
    }
    var HTMLSCntMarketRecentlyWatchedElement: {
        prototype: HTMLSCntMarketRecentlyWatchedElement;
        new (): HTMLSCntMarketRecentlyWatchedElement;
    };
    interface HTMLSCntMarketRecentlyWatchedCardElement extends Components.SCntMarketRecentlyWatchedCard, HTMLStencilElement {
    }
    var HTMLSCntMarketRecentlyWatchedCardElement: {
        prototype: HTMLSCntMarketRecentlyWatchedCardElement;
        new (): HTMLSCntMarketRecentlyWatchedCardElement;
    };
    interface HTMLSCntMarketRecommendedElement extends Components.SCntMarketRecommended, HTMLStencilElement {
    }
    var HTMLSCntMarketRecommendedElement: {
        prototype: HTMLSCntMarketRecommendedElement;
        new (): HTMLSCntMarketRecommendedElement;
    };
    interface HTMLSCntMarketRegistrationFormElement extends Components.SCntMarketRegistrationForm, HTMLStencilElement {
    }
    var HTMLSCntMarketRegistrationFormElement: {
        prototype: HTMLSCntMarketRegistrationFormElement;
        new (): HTMLSCntMarketRegistrationFormElement;
    };
    interface HTMLSCntMarketRemindPasswordElement extends Components.SCntMarketRemindPassword, HTMLStencilElement {
    }
    var HTMLSCntMarketRemindPasswordElement: {
        prototype: HTMLSCntMarketRemindPasswordElement;
        new (): HTMLSCntMarketRemindPasswordElement;
    };
    interface HTMLSCntMarketSelectionElement extends Components.SCntMarketSelection, HTMLStencilElement {
    }
    var HTMLSCntMarketSelectionElement: {
        prototype: HTMLSCntMarketSelectionElement;
        new (): HTMLSCntMarketSelectionElement;
    };
    interface HTMLSCntMarketShipmentsElement extends Components.SCntMarketShipments, HTMLStencilElement {
    }
    var HTMLSCntMarketShipmentsElement: {
        prototype: HTMLSCntMarketShipmentsElement;
        new (): HTMLSCntMarketShipmentsElement;
    };
    interface HTMLSCntMarketShopElement extends Components.SCntMarketShop, HTMLStencilElement {
    }
    var HTMLSCntMarketShopElement: {
        prototype: HTMLSCntMarketShopElement;
        new (): HTMLSCntMarketShopElement;
    };
    interface HTMLSCntMarketSpecialistElement extends Components.SCntMarketSpecialist, HTMLStencilElement {
    }
    var HTMLSCntMarketSpecialistElement: {
        prototype: HTMLSCntMarketSpecialistElement;
        new (): HTMLSCntMarketSpecialistElement;
    };
    interface HTMLSCntMarketSpecificationElement extends Components.SCntMarketSpecification, HTMLStencilElement {
    }
    var HTMLSCntMarketSpecificationElement: {
        prototype: HTMLSCntMarketSpecificationElement;
        new (): HTMLSCntMarketSpecificationElement;
    };
    interface HTMLSCntMarketStatisticsElement extends Components.SCntMarketStatistics, HTMLStencilElement {
    }
    var HTMLSCntMarketStatisticsElement: {
        prototype: HTMLSCntMarketStatisticsElement;
        new (): HTMLSCntMarketStatisticsElement;
    };
    interface HTMLSCntMarketStoreSelectTopElement extends Components.SCntMarketStoreSelectTop, HTMLStencilElement {
    }
    var HTMLSCntMarketStoreSelectTopElement: {
        prototype: HTMLSCntMarketStoreSelectTopElement;
        new (): HTMLSCntMarketStoreSelectTopElement;
    };
    interface HTMLSCntMarketTopBarElement extends Components.SCntMarketTopBar, HTMLStencilElement {
    }
    var HTMLSCntMarketTopBarElement: {
        prototype: HTMLSCntMarketTopBarElement;
        new (): HTMLSCntMarketTopBarElement;
    };
    interface HTMLSCntMarketUpFooterElement extends Components.SCntMarketUpFooter, HTMLStencilElement {
    }
    var HTMLSCntMarketUpFooterElement: {
        prototype: HTMLSCntMarketUpFooterElement;
        new (): HTMLSCntMarketUpFooterElement;
    };
    interface HTMLSCntMarketUpFooterFormElement extends Components.SCntMarketUpFooterForm, HTMLStencilElement {
    }
    var HTMLSCntMarketUpFooterFormElement: {
        prototype: HTMLSCntMarketUpFooterFormElement;
        new (): HTMLSCntMarketUpFooterFormElement;
    };
    interface HTMLSCntMarketUserAccountElement extends Components.SCntMarketUserAccount, HTMLStencilElement {
    }
    var HTMLSCntMarketUserAccountElement: {
        prototype: HTMLSCntMarketUserAccountElement;
        new (): HTMLSCntMarketUserAccountElement;
    };
    interface HTMLElementTagNameMap {
        "group-a": HTMLGroupAElement;
        "group-b": HTMLGroupBElement;
        "my-component": HTMLMyComponentElement;
        "s-cnt-market-account-menu": HTMLSCntMarketAccountMenuElement;
        "s-cnt-market-app": HTMLSCntMarketAppElement;
        "s-cnt-market-back-to-top": HTMLSCntMarketBackToTopElement;
        "s-cnt-market-basket": HTMLSCntMarketBasketElement;
        "s-cnt-market-choice": HTMLSCntMarketChoiceElement;
        "s-cnt-market-courier": HTMLSCntMarketCourierElement;
        "s-cnt-market-delivery": HTMLSCntMarketDeliveryElement;
        "s-cnt-market-delivery-in-modal": HTMLSCntMarketDeliveryInModalElement;
        "s-cnt-market-delivery-item": HTMLSCntMarketDeliveryItemElement;
        "s-cnt-market-delivery-modal": HTMLSCntMarketDeliveryModalElement;
        "s-cnt-market-down-footer": HTMLSCntMarketDownFooterElement;
        "s-cnt-market-favorite-products": HTMLSCntMarketFavoriteProductsElement;
        "s-cnt-market-first-page": HTMLSCntMarketFirstPageElement;
        "s-cnt-market-footer": HTMLSCntMarketFooterElement;
        "s-cnt-market-footer-info": HTMLSCntMarketFooterInfoElement;
        "s-cnt-market-footer-info-item": HTMLSCntMarketFooterInfoItemElement;
        "s-cnt-market-footer-items": HTMLSCntMarketFooterItemsElement;
        "s-cnt-market-footer-modal-form": HTMLSCntMarketFooterModalFormElement;
        "s-cnt-market-header": HTMLSCntMarketHeaderElement;
        "s-cnt-market-header-base": HTMLSCntMarketHeaderBaseElement;
        "s-cnt-market-header-body": HTMLSCntMarketHeaderBodyElement;
        "s-cnt-market-header-nav": HTMLSCntMarketHeaderNavElement;
        "s-cnt-market-header-wrapper": HTMLSCntMarketHeaderWrapperElement;
        "s-cnt-market-item-choice": HTMLSCntMarketItemChoiceElement;
        "s-cnt-market-item-courier": HTMLSCntMarketItemCourierElement;
        "s-cnt-market-item-offer": HTMLSCntMarketItemOfferElement;
        "s-cnt-market-item-recommended": HTMLSCntMarketItemRecommendedElement;
        "s-cnt-market-item-selection": HTMLSCntMarketItemSelectionElement;
        "s-cnt-market-item-specialist": HTMLSCntMarketItemSpecialistElement;
        "s-cnt-market-item-statistics": HTMLSCntMarketItemStatisticsElement;
        "s-cnt-market-left-menu-catalog": HTMLSCntMarketLeftMenuCatalogElement;
        "s-cnt-market-login-and-registration-form": HTMLSCntMarketLoginAndRegistrationFormElement;
        "s-cnt-market-login-form": HTMLSCntMarketLoginFormElement;
        "s-cnt-market-modal-window": HTMLSCntMarketModalWindowElement;
        "s-cnt-market-offer": HTMLSCntMarketOfferElement;
        "s-cnt-market-ordering": HTMLSCntMarketOrderingElement;
        "s-cnt-market-ordering-column": HTMLSCntMarketOrderingColumnElement;
        "s-cnt-market-ordering-contacts": HTMLSCntMarketOrderingContactsElement;
        "s-cnt-market-ordering-final": HTMLSCntMarketOrderingFinalElement;
        "s-cnt-market-ordering-header": HTMLSCntMarketOrderingHeaderElement;
        "s-cnt-market-ordering-method": HTMLSCntMarketOrderingMethodElement;
        "s-cnt-market-ordering-payment": HTMLSCntMarketOrderingPaymentElement;
        "s-cnt-market-ordering-payment-online": HTMLSCntMarketOrderingPaymentOnlineElement;
        "s-cnt-market-ordering-payment-transfer": HTMLSCntMarketOrderingPaymentTransferElement;
        "s-cnt-market-ordering-replacement-policy": HTMLSCntMarketOrderingReplacementPolicyElement;
        "s-cnt-market-ordering-replacements": HTMLSCntMarketOrderingReplacementsElement;
        "s-cnt-market-ordering-sidebar": HTMLSCntMarketOrderingSidebarElement;
        "s-cnt-market-ordering-time-of-receipt": HTMLSCntMarketOrderingTimeOfReceiptElement;
        "s-cnt-market-ordering-time-panel-item": HTMLSCntMarketOrderingTimePanelItemElement;
        "s-cnt-market-ordering-time-panel-tab": HTMLSCntMarketOrderingTimePanelTabElement;
        "s-cnt-market-orders-wrapper": HTMLSCntMarketOrdersWrapperElement;
        "s-cnt-market-pickup-in-modal": HTMLSCntMarketPickupInModalElement;
        "s-cnt-market-product": HTMLSCntMarketProductElement;
        "s-cnt-market-product-filter-said-bar": HTMLSCntMarketProductFilterSaidBarElement;
        "s-cnt-market-product-page": HTMLSCntMarketProductPageElement;
        "s-cnt-market-products-list": HTMLSCntMarketProductsListElement;
        "s-cnt-market-products-list-card": HTMLSCntMarketProductsListCardElement;
        "s-cnt-market-products-list-item": HTMLSCntMarketProductsListItemElement;
        "s-cnt-market-products-slider": HTMLSCntMarketProductsSliderElement;
        "s-cnt-market-products-slider-card": HTMLSCntMarketProductsSliderCardElement;
        "s-cnt-market-promo-slider": HTMLSCntMarketPromoSliderElement;
        "s-cnt-market-promo-slider-card": HTMLSCntMarketPromoSliderCardElement;
        "s-cnt-market-recently-watched": HTMLSCntMarketRecentlyWatchedElement;
        "s-cnt-market-recently-watched-card": HTMLSCntMarketRecentlyWatchedCardElement;
        "s-cnt-market-recommended": HTMLSCntMarketRecommendedElement;
        "s-cnt-market-registration-form": HTMLSCntMarketRegistrationFormElement;
        "s-cnt-market-remind-password": HTMLSCntMarketRemindPasswordElement;
        "s-cnt-market-selection": HTMLSCntMarketSelectionElement;
        "s-cnt-market-shipments": HTMLSCntMarketShipmentsElement;
        "s-cnt-market-shop": HTMLSCntMarketShopElement;
        "s-cnt-market-specialist": HTMLSCntMarketSpecialistElement;
        "s-cnt-market-specification": HTMLSCntMarketSpecificationElement;
        "s-cnt-market-statistics": HTMLSCntMarketStatisticsElement;
        "s-cnt-market-store-select-top": HTMLSCntMarketStoreSelectTopElement;
        "s-cnt-market-top-bar": HTMLSCntMarketTopBarElement;
        "s-cnt-market-up-footer": HTMLSCntMarketUpFooterElement;
        "s-cnt-market-up-footer-form": HTMLSCntMarketUpFooterFormElement;
        "s-cnt-market-user-account": HTMLSCntMarketUserAccountElement;
    }
}
declare namespace LocalJSX {
    interface GroupA {
    }
    interface GroupB {
    }
    interface MyComponent {
    }
    interface SCntMarketAccountMenu {
        /**
          * close account menu modal
         */
        "onCloseAccountMenu"?: (event: CustomEvent<void>) => void;
    }
    interface SCntMarketApp {
        /**
          * Данные для компонента app
         */
        "forApp"?: MarketAppInterface;
    }
    interface SCntMarketBackToTop {
    }
    interface SCntMarketBasket {
        /**
          * Продукты из корзины
         */
        "marketCartProducts"?: MarketCartProductsInterface[];
        /**
          * /Закрыть корзину
         */
        "onCloseBasket"?: (event: CustomEvent<void>) => void;
        /**
          * Стейт на состояние корзины открыто/закрыто
         */
        "openedBasket"?: boolean;
    }
    interface SCntMarketChoice {
        /**
          * Данные для заголовка
         */
        "choiceTitleText"?: string;
        /**
          * Данные для компонента Choice
         */
        "forChoice"?: MarketChoiceInterface[];
    }
    interface SCntMarketCourier {
        /**
          * Данные для компонента Choice
         */
        "forCourier"?: MarketCourierInterface[];
    }
    interface SCntMarketDelivery {
        /**
          * Данные для компонента delivery
         */
        "delivery"?: MarketDeliveryInterface;
    }
    interface SCntMarketDeliveryInModal {
        /**
          * Props значение для принятия и вывода данных
         */
        "deliveryData"?: MarketTopBarModalDeliveryInterface;
    }
    interface SCntMarketDeliveryItem {
        /**
          * Список городов
         */
        "delivery"?: MarketCitiesInterface;
    }
    interface SCntMarketDeliveryModal {
        /**
          * boolean значение для вывода/закрытия блока доставки и присвоения класса
         */
        "delivery"?: boolean;
        /**
          * объект из mock для вывода данных в компоненте модального окна
         */
        "modalData"?: MarketTopBarModalInterface;
        /**
          * Закрытие модального модального окна выбора адреса
         */
        "onCloseForm"?: (event: CustomEvent<any>) => void;
        /**
          * функция для смены значения boolean пропса pickUp
         */
        "onIdSelectionAddress"?: (event: CustomEvent<any>) => void;
        /**
          * функция для смены значения boolean пропса delivery
         */
        "onOpenDelivery"?: (event: CustomEvent<any>) => void;
        /**
          * Закрытие модального модального окна
         */
        "onOpenLogin"?: (event: CustomEvent<any>) => void;
        /**
          * функция для смены значения boolean пропса pickUp
         */
        "onOpenPickUp"?: (event: CustomEvent<any>) => void;
        /**
          * boolean значение для вывода/закрытия блока самовывоза и присвоения класса
         */
        "pickUp"?: boolean;
    }
    interface SCntMarketDownFooter {
        /**
          * Данные для DownFooter
         */
        "footerCopyrightRow"?: footerCopyrightRowInterface;
    }
    interface SCntMarketFavoriteProducts {
    }
    interface SCntMarketFirstPage {
    }
    interface SCntMarketFooter {
        /**
          * Данные для всего футера
         */
        "footerData"?: footerDataInterface;
    }
    interface SCntMarketFooterInfo {
        /**
          * Данные для вывода в блок
         */
        "footerLinksPolitics"?: footerLinksPoliticsInterface;
    }
    interface SCntMarketFooterInfoItem {
        /**
          * Данные для политики безопасности
         */
        "footerLinksPolitics"?: footerLinksPoliticsInterface;
    }
    interface SCntMarketFooterItems {
        /**
          * элементы списка меню
         */
        "footerItems"?: footerItemsInterface;
    }
    interface SCntMarketFooterModalForm {
        "onClickOnCloseModalForm"?: (event: CustomEvent<void>) => void;
        /**
          * show modal form
         */
        "showModalForm"?: boolean;
    }
    interface SCntMarketHeader {
        /**
          * Массив данных для хедера
         */
        "categories"?: any;
        /**
          * Данные об авторизации пользователя
         */
        "login"?: boolean;
        "onOpenLoginModal"?: (event: CustomEvent<any>) => void;
    }
    interface SCntMarketHeaderBase {
        "logo"?: string;
        "number"?: string;
        "onOpenLoginModal"?: (event: CustomEvent<any>) => void;
    }
    interface SCntMarketHeaderBody {
        /**
          * Элементы для навигации
         */
        "body"?: NavMenuItemInterface;
    }
    interface SCntMarketHeaderNav {
        /**
          * Данные для магазинов из каталога
         */
        "leftMenuCatalogArr"?: MarketLeftMenuCatalogInterface[];
        /**
          * Log in user
         */
        "login"?: boolean;
        "navBar"?: MarketNavBarInterface;
        "onOpenLoginModal"?: (event: CustomEvent<any>) => void;
        /**
          * магазины для вашего города
         */
        "selectShops"?: MarketSelectShopsInterface[];
    }
    interface SCntMarketHeaderWrapper {
        /**
          * Массив данных для хедера
         */
        "categories"?: any;
        /**
          * Первоначальная страница
         */
        "firstPage"?: boolean;
        /**
          * Авторизация юзера
         */
        "login"?: boolean;
        "onOpenLoginModal"?: (event: CustomEvent<void>) => void;
    }
    interface SCntMarketItemChoice {
        /**
          * Данные для компонента Choice
         */
        "forChoice"?: MarketChoiceInterface;
        /**
          * Данные для компонента Specialist
         */
        "forSpecialist"?: MarketSpecialistInterface;
    }
    interface SCntMarketItemCourier {
        /**
          * Данные для компонента Choice
         */
        "forCourier"?: MarketCourierInterface;
    }
    interface SCntMarketItemOffer {
        /**
          * Данные для компонента Item Offer
         */
        "forOffer"?: MarketOfferInterface;
    }
    interface SCntMarketItemRecommended {
        /**
          * Данные для Item-Recommended
         */
        "getRecommended"?: MarketFeaturedProductInterface;
    }
    interface SCntMarketItemSelection {
        /**
          * Данные для карточек магазинов
         */
        "forSelection"?: MarketSelectionInterface;
    }
    interface SCntMarketItemSpecialist {
        /**
          * Данные для компонента Specialist
         */
        "forSpecialist"?: MarketSpecialistInterface;
    }
    interface SCntMarketItemStatistics {
        /**
          * Данные для компонента Statistics
         */
        "forStatistics"?: MarketStatisticsInterface;
    }
    interface SCntMarketLeftMenuCatalog {
        /**
          * массив магазинов для вывода
         */
        "leftMenuCatalogArr"?: MarketLeftMenuCatalogInterface[];
        /**
          * закрывать меню
         */
        "onCloseLeftMenu"?: (event: CustomEvent<void>) => void;
        /**
          * стейт на состояние меню
         */
        "openedLeftMenu"?: boolean;
    }
    interface SCntMarketLoginAndRegistrationForm {
        /**
          * значения для присвоения ширины блока
         */
        "blockWidth"?: string;
        /**
          * boolean значение для вывода/закрытия блока входа и присвоения класса
         */
        "login"?: boolean;
        /**
          * объект данных для компонента LoginAndRegistrationForm и его подкомпонентов
         */
        "loginAndRegistration"?: MarketLoginAndRegistrationInterface;
        /**
          * Закрытие модального модального окна формы входа/регистрации
         */
        "onCloseLogin"?: (event: CustomEvent<any>) => void;
        /**
          * функция для смены значения boolean пропса login
         */
        "onOpenLogin"?: (event: CustomEvent<any>) => void;
        /**
          * функция для смены значения boolean пропса registration
         */
        "onOpenRegistration"?: (event: CustomEvent<any>) => void;
        /**
          * boolean значение для вывода/закрытия блока регистрации и присвоения класса
         */
        "registration"?: boolean;
    }
    interface SCntMarketLoginForm {
        /**
          * объект данных для компонента входа
         */
        "login"?: MarketLoginInterface;
        "onCallRemind"?: (event: CustomEvent<any>) => void;
        /**
          * массив с данными пользователей
         */
        "users"?: MarketUsersArrInterface[];
    }
    interface SCntMarketModalWindow {
        /**
          * Клик по кнопке закрытия модального окна
         */
        "onClickOnModal"?: (event: CustomEvent<void>) => void;
        "productData"?: MarketProductDataInterface;
        /**
          * Данные для модального окна
         */
        "productModal"?: MarketProductModalInterface;
    }
    interface SCntMarketOffer {
        /**
          * Данные для компонента Offer
         */
        "forOffer"?: MarketOfferInterface[];
        /**
          * Данные для заголовка
         */
        "offerTitleText"?: string;
    }
    interface SCntMarketOrdering {
    }
    interface SCntMarketOrderingColumn {
        /**
          * Данные для панелей
         */
        "ordering"?: any;
    }
    interface SCntMarketOrderingContacts {
        /**
          * Стейт для переключения класса active
         */
        "addOrRemoveClassState"?: boolean;
        /**
          * Данные для панели контакты
         */
        "contacts"?: any;
        /**
          * Добавление класса active
         */
        "onAddClassActive"?: (event: CustomEvent<any>) => void;
        /**
          * Удаление класса active
         */
        "onRemoveClassActive"?: (event: CustomEvent<any>) => void;
    }
    interface SCntMarketOrderingFinal {
        /**
          * Текст для блока "оформить заказ"
         */
        "final"?: any;
    }
    interface SCntMarketOrderingHeader {
        "logo"?: string;
    }
    interface SCntMarketOrderingMethod {
        /**
          * Стейт для переключения класса active
         */
        "addOrRemoveClassState"?: boolean;
        /**
          * Данные для панели метод получения
         */
        "method"?: any;
        /**
          * Добавление класса active
         */
        "onAddClassActive"?: (event: CustomEvent<any>) => void;
        /**
          * Удаление класса active
         */
        "onRemoveClassActive"?: (event: CustomEvent<any>) => void;
    }
    interface SCntMarketOrderingPayment {
        /**
          * Стейт для переключения класса active
         */
        "addOrRemoveClassState"?: boolean;
        /**
          * Добавление класса active
         */
        "onAddClassActive"?: (event: CustomEvent<any>) => void;
        /**
          * Удаление класса active
         */
        "onRemoveClassActive"?: (event: CustomEvent<any>) => void;
        /**
          * Данные для панели метод получения
         */
        "payment"?: any;
    }
    interface SCntMarketOrderingPaymentOnline {
        /**
          * Данные для раздела онлайн оплата
         */
        "online"?: any;
    }
    interface SCntMarketOrderingPaymentTransfer {
        /**
          * данные для блока оплата переводом
         */
        "transfer"?: any;
    }
    interface SCntMarketOrderingReplacementPolicy {
        /**
          * Данные для панелей политика доставки
         */
        "panels"?: any;
    }
    interface SCntMarketOrderingReplacements {
        /**
          * Стейт для переключения класса active
         */
        "addOrRemoveClassState"?: boolean;
        /**
          * Добавление класса active
         */
        "onAddClassActive"?: (event: CustomEvent<any>) => void;
        /**
          * Удаление класса active
         */
        "onRemoveClassActive"?: (event: CustomEvent<any>) => void;
        /**
          * Данные для панели метод получения
         */
        "replacements"?: any;
    }
    interface SCntMarketOrderingSidebar {
    }
    interface SCntMarketOrderingTimeOfReceipt {
        /**
          * Стейт для переключения класса active
         */
        "addOrRemoveClassState"?: boolean;
        /**
          * Добавление класса active
         */
        "onAddClassActive"?: (event: CustomEvent<any>) => void;
        /**
          * Удаление класса active
         */
        "onRemoveClassActive"?: (event: CustomEvent<any>) => void;
        /**
          * Данные для панели метод получения
         */
        "timetable"?: any;
    }
    interface SCntMarketOrderingTimePanelItem {
        /**
          * Время заказа
         */
        "time"?: any;
    }
    interface SCntMarketOrderingTimePanelTab {
        /**
          * Дата и день недели
         */
        "date"?: any;
    }
    interface SCntMarketOrdersWrapper {
    }
    interface SCntMarketPickupInModal {
        /**
          * функция для смены значения boolean пропса pickUp
         */
        "onIdSelectionAddress"?: (event: CustomEvent<any>) => void;
        /**
          * Данные из объекта мок
         */
        "pickUpData"?: MarketTopBarModalPickUpInterface;
    }
    interface SCntMarketProduct {
        /**
          * Данные для Product
         */
        "getProduct"?: MarketGetProductInterface;
        /**
          * Клик по кнопке закрытия модального окна
         */
        "onClickOnModal"?: (event: CustomEvent<void>) => void;
        /**
          * Данные для Product
         */
        "productBlock"?: MarketProductBlockInterface;
    }
    interface SCntMarketProductFilterSaidBar {
        /**
          * Данные для вывода брендов
         */
        "brands"?: MarketProductListInterface;
        /**
          * checked для смены класса и показа товаров со скидкой
         */
        "checkedDesc"?: boolean;
        /**
          * Клик для смены значения булен при выборе товаров со скидкой и без
         */
        "onCheckDesc"?: (event: CustomEvent<any>) => void;
        /**
          * Клик по карточке для показа модального окна
         */
        "onClickBrandSelect"?: (event: CustomEvent<void>) => void;
        /**
          * Данные объекта для заполнения компонента
         */
        "productFilter"?: MarketProductsPageFilterInterface;
    }
    interface SCntMarketProductPage {
        /**
          * Клик по карточке для показа модального окна
         */
        "onShowModal"?: (event: CustomEvent<any>) => void;
        /**
          * Данные для списка товаров
         */
        "productsList"?: MarketProductListInterface[];
        /**
          * Данные объекта для заполнения компонента
         */
        "productsPage"?: MarketProductPageInterface;
        /**
          * Данные карточек слайдера популярных продуктов
         */
        "productsSliderCards"?: MarketProductsSliderCardsInterface[];
        /**
          * Заголовк слайдера
         */
        "productsSliderTitle"?: string;
        /**
          * Принимает id выбранной категории для вывода ее товаров
         */
        "selectedCategoryId"?: number;
    }
    interface SCntMarketProductsList {
        /**
          * Клик
         */
        "onSelectedId"?: (event: CustomEvent<any>) => void;
        /**
          * Клик по карточке для показа модального окна
         */
        "onShowModal"?: (event: CustomEvent<void>) => void;
        /**
          * Данные для списка товаров
         */
        "productsList"?: MarketProductListInterface[];
    }
    interface SCntMarketProductsListCard {
        /**
          * Клик
         */
        "onSelectedId"?: (event: CustomEvent<any>) => void;
        /**
          * Клик по карточке для показа модального окна
         */
        "onShowModal"?: (event: CustomEvent<void>) => void;
        /**
          * Данные для списка товаров
         */
        "productsList"?: MarketProductListInterface;
    }
    interface SCntMarketProductsListItem {
        /**
          * Клик по карточке для показа модального окна
         */
        "onShowModal"?: (event: CustomEvent<void>) => void;
        /**
          * Данные для карточки товара
         */
        "productsListCard"?: MarketProductListCardInterface;
    }
    interface SCntMarketProductsSlider {
        /**
          * Клик по карточке для показа модального окна
         */
        "onShowModal"?: (event: CustomEvent<void>) => void;
        /**
          * Данные карточек слайдера популярных продуктов
         */
        "productsSliderCards"?: MarketProductsSliderCardsInterface[];
        /**
          * Заголовк слайдера
         */
        "productsSliderTitle"?: string;
        /**
          * обертка для слайдера товара
         */
        "theme"?: "main-container" | "cart";
    }
    interface SCntMarketProductsSliderCard {
        /**
          * Клик по карточке для показа модального окна
         */
        "onShowModal"?: (event: CustomEvent<void>) => void;
        /**
          * Получаем данные карточек слайдера популярных продуктов
         */
        "productsSliderCards"?: MarketProductsSliderCardsInterface;
    }
    interface SCntMarketPromoSlider {
        /**
          * Получаем данные карточек промо-слайдера
         */
        "promoSliderCards"?: MarketPromoSliderInterface[];
    }
    interface SCntMarketPromoSliderCard {
        /**
          * Получаем данные карточек промо-слайдера
         */
        "promoSliderCards"?: MarketPromoSliderInterface;
    }
    interface SCntMarketRecentlyWatched {
        /**
          * Клик по карточке для показа модального окна
         */
        "onShowModal"?: (event: CustomEvent<void>) => void;
        /**
          * Данные карточек слайдера просмотренных товаров
         */
        "recentlyWatchedProducts"?: MarketRecentlyWatchedProductsInterface[];
        /**
          * Заголовк раздела
         */
        "recentlyWatchedTitle"?: string;
    }
    interface SCntMarketRecentlyWatchedCard {
        /**
          * Клик по карточке для показа модального окна
         */
        "onShowModal"?: (event: CustomEvent<void>) => void;
        /**
          * Данные карточек слайдера просмотренных товаров
         */
        "recentlyWatchedProducts"?: MarketRecentlyWatchedProductsInterface;
    }
    interface SCntMarketRecommended {
        /**
          * Данные для Recommended
         */
        "getRecommended"?: MarketGetRecommendedInterface;
        /**
          * Данные для Recommended
         */
        "recommendedBlock"?: MarketRecommendedBlockInterface;
    }
    interface SCntMarketRegistrationForm {
        /**
          * объект данных для компонента регистрации
         */
        "reg"?: MarketRegistrationInterface;
        /**
          * массив с данными пользователей
         */
        "users"?: MarketUsersArrInterface[];
    }
    interface SCntMarketRemindPassword {
        /**
          * boolean значение
         */
        "backBtn"?: boolean;
        "onClickSendMail"?: (event: CustomEvent<any>) => void;
        /**
          * Закрытие модального модального окна формы входа/регистрации
         */
        "onCloseLogin"?: (event: CustomEvent<any>) => void;
        /**
          * объект данных для компонента входа
         */
        "remindPass"?: MarketRemindPasswordInterface;
        /**
          * массив с данными пользователей
         */
        "users"?: MarketUsersArrInterface[];
    }
    interface SCntMarketSelection {
        /**
          * Данные для карточек магазинов
         */
        "forSelection"?: MarketSelectionInterface[];
        /**
          * Данные для главной картинки
         */
        "homePageImage"?: string;
        /**
          * Данные для подзаголовка на картинке
         */
        "homeSubText"?: string;
        /**
          * Данные для заголовка на картинке
         */
        "homeText"?: string;
    }
    interface SCntMarketShipments {
    }
    interface SCntMarketShop {
    }
    interface SCntMarketSpecialist {
        /**
          * Данные для компонента Specialist
         */
        "forSpecialist"?: MarketSpecialistInterface[];
    }
    interface SCntMarketSpecification {
        /**
          * Данные для Specification
         */
        "getSpecification"?: MarketGetSpecificationInterface;
        /**
          * Данные для Specification
         */
        "specificationBlock"?: MarketSpecificationBlockInterface;
    }
    interface SCntMarketStatistics {
        /**
          * Данные для компонента Statistics
         */
        "forStatistics"?: MarketStatisticsInterface[];
    }
    interface SCntMarketStoreSelectTop {
        /**
          * /Закрыть корзину
         */
        "onCloseStoreSelect"?: (event: CustomEvent<void>) => void;
        /**
          * состояние модалки
         */
        "openedStoreSelect"?: boolean;
        /**
          * selectShops
         */
        "selectShops"?: MarketSelectShopsInterface[];
    }
    interface SCntMarketTopBar {
        /**
          * объект данных для компонента top-bar и его подкомпонентов
         */
        "topBar"?: MarketTopBarInterface;
    }
    interface SCntMarketUpFooter {
        /**
          * Данные для элементов меню в подвале
         */
        "footerMenu"?: footerMenuInterface;
    }
    interface SCntMarketUpFooterForm {
        /**
          * Контактные данные для 4 колонки в футере
         */
        "footerContactColumn"?: footerContactColumnInterface;
    }
    interface SCntMarketUserAccount {
    }
    interface IntrinsicElements {
        "group-a": GroupA;
        "group-b": GroupB;
        "my-component": MyComponent;
        "s-cnt-market-account-menu": SCntMarketAccountMenu;
        "s-cnt-market-app": SCntMarketApp;
        "s-cnt-market-back-to-top": SCntMarketBackToTop;
        "s-cnt-market-basket": SCntMarketBasket;
        "s-cnt-market-choice": SCntMarketChoice;
        "s-cnt-market-courier": SCntMarketCourier;
        "s-cnt-market-delivery": SCntMarketDelivery;
        "s-cnt-market-delivery-in-modal": SCntMarketDeliveryInModal;
        "s-cnt-market-delivery-item": SCntMarketDeliveryItem;
        "s-cnt-market-delivery-modal": SCntMarketDeliveryModal;
        "s-cnt-market-down-footer": SCntMarketDownFooter;
        "s-cnt-market-favorite-products": SCntMarketFavoriteProducts;
        "s-cnt-market-first-page": SCntMarketFirstPage;
        "s-cnt-market-footer": SCntMarketFooter;
        "s-cnt-market-footer-info": SCntMarketFooterInfo;
        "s-cnt-market-footer-info-item": SCntMarketFooterInfoItem;
        "s-cnt-market-footer-items": SCntMarketFooterItems;
        "s-cnt-market-footer-modal-form": SCntMarketFooterModalForm;
        "s-cnt-market-header": SCntMarketHeader;
        "s-cnt-market-header-base": SCntMarketHeaderBase;
        "s-cnt-market-header-body": SCntMarketHeaderBody;
        "s-cnt-market-header-nav": SCntMarketHeaderNav;
        "s-cnt-market-header-wrapper": SCntMarketHeaderWrapper;
        "s-cnt-market-item-choice": SCntMarketItemChoice;
        "s-cnt-market-item-courier": SCntMarketItemCourier;
        "s-cnt-market-item-offer": SCntMarketItemOffer;
        "s-cnt-market-item-recommended": SCntMarketItemRecommended;
        "s-cnt-market-item-selection": SCntMarketItemSelection;
        "s-cnt-market-item-specialist": SCntMarketItemSpecialist;
        "s-cnt-market-item-statistics": SCntMarketItemStatistics;
        "s-cnt-market-left-menu-catalog": SCntMarketLeftMenuCatalog;
        "s-cnt-market-login-and-registration-form": SCntMarketLoginAndRegistrationForm;
        "s-cnt-market-login-form": SCntMarketLoginForm;
        "s-cnt-market-modal-window": SCntMarketModalWindow;
        "s-cnt-market-offer": SCntMarketOffer;
        "s-cnt-market-ordering": SCntMarketOrdering;
        "s-cnt-market-ordering-column": SCntMarketOrderingColumn;
        "s-cnt-market-ordering-contacts": SCntMarketOrderingContacts;
        "s-cnt-market-ordering-final": SCntMarketOrderingFinal;
        "s-cnt-market-ordering-header": SCntMarketOrderingHeader;
        "s-cnt-market-ordering-method": SCntMarketOrderingMethod;
        "s-cnt-market-ordering-payment": SCntMarketOrderingPayment;
        "s-cnt-market-ordering-payment-online": SCntMarketOrderingPaymentOnline;
        "s-cnt-market-ordering-payment-transfer": SCntMarketOrderingPaymentTransfer;
        "s-cnt-market-ordering-replacement-policy": SCntMarketOrderingReplacementPolicy;
        "s-cnt-market-ordering-replacements": SCntMarketOrderingReplacements;
        "s-cnt-market-ordering-sidebar": SCntMarketOrderingSidebar;
        "s-cnt-market-ordering-time-of-receipt": SCntMarketOrderingTimeOfReceipt;
        "s-cnt-market-ordering-time-panel-item": SCntMarketOrderingTimePanelItem;
        "s-cnt-market-ordering-time-panel-tab": SCntMarketOrderingTimePanelTab;
        "s-cnt-market-orders-wrapper": SCntMarketOrdersWrapper;
        "s-cnt-market-pickup-in-modal": SCntMarketPickupInModal;
        "s-cnt-market-product": SCntMarketProduct;
        "s-cnt-market-product-filter-said-bar": SCntMarketProductFilterSaidBar;
        "s-cnt-market-product-page": SCntMarketProductPage;
        "s-cnt-market-products-list": SCntMarketProductsList;
        "s-cnt-market-products-list-card": SCntMarketProductsListCard;
        "s-cnt-market-products-list-item": SCntMarketProductsListItem;
        "s-cnt-market-products-slider": SCntMarketProductsSlider;
        "s-cnt-market-products-slider-card": SCntMarketProductsSliderCard;
        "s-cnt-market-promo-slider": SCntMarketPromoSlider;
        "s-cnt-market-promo-slider-card": SCntMarketPromoSliderCard;
        "s-cnt-market-recently-watched": SCntMarketRecentlyWatched;
        "s-cnt-market-recently-watched-card": SCntMarketRecentlyWatchedCard;
        "s-cnt-market-recommended": SCntMarketRecommended;
        "s-cnt-market-registration-form": SCntMarketRegistrationForm;
        "s-cnt-market-remind-password": SCntMarketRemindPassword;
        "s-cnt-market-selection": SCntMarketSelection;
        "s-cnt-market-shipments": SCntMarketShipments;
        "s-cnt-market-shop": SCntMarketShop;
        "s-cnt-market-specialist": SCntMarketSpecialist;
        "s-cnt-market-specification": SCntMarketSpecification;
        "s-cnt-market-statistics": SCntMarketStatistics;
        "s-cnt-market-store-select-top": SCntMarketStoreSelectTop;
        "s-cnt-market-top-bar": SCntMarketTopBar;
        "s-cnt-market-up-footer": SCntMarketUpFooter;
        "s-cnt-market-up-footer-form": SCntMarketUpFooterForm;
        "s-cnt-market-user-account": SCntMarketUserAccount;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "group-a": LocalJSX.GroupA & JSXBase.HTMLAttributes<HTMLGroupAElement>;
            "group-b": LocalJSX.GroupB & JSXBase.HTMLAttributes<HTMLGroupBElement>;
            "my-component": LocalJSX.MyComponent & JSXBase.HTMLAttributes<HTMLMyComponentElement>;
            "s-cnt-market-account-menu": LocalJSX.SCntMarketAccountMenu & JSXBase.HTMLAttributes<HTMLSCntMarketAccountMenuElement>;
            "s-cnt-market-app": LocalJSX.SCntMarketApp & JSXBase.HTMLAttributes<HTMLSCntMarketAppElement>;
            "s-cnt-market-back-to-top": LocalJSX.SCntMarketBackToTop & JSXBase.HTMLAttributes<HTMLSCntMarketBackToTopElement>;
            "s-cnt-market-basket": LocalJSX.SCntMarketBasket & JSXBase.HTMLAttributes<HTMLSCntMarketBasketElement>;
            "s-cnt-market-choice": LocalJSX.SCntMarketChoice & JSXBase.HTMLAttributes<HTMLSCntMarketChoiceElement>;
            "s-cnt-market-courier": LocalJSX.SCntMarketCourier & JSXBase.HTMLAttributes<HTMLSCntMarketCourierElement>;
            "s-cnt-market-delivery": LocalJSX.SCntMarketDelivery & JSXBase.HTMLAttributes<HTMLSCntMarketDeliveryElement>;
            "s-cnt-market-delivery-in-modal": LocalJSX.SCntMarketDeliveryInModal & JSXBase.HTMLAttributes<HTMLSCntMarketDeliveryInModalElement>;
            "s-cnt-market-delivery-item": LocalJSX.SCntMarketDeliveryItem & JSXBase.HTMLAttributes<HTMLSCntMarketDeliveryItemElement>;
            "s-cnt-market-delivery-modal": LocalJSX.SCntMarketDeliveryModal & JSXBase.HTMLAttributes<HTMLSCntMarketDeliveryModalElement>;
            "s-cnt-market-down-footer": LocalJSX.SCntMarketDownFooter & JSXBase.HTMLAttributes<HTMLSCntMarketDownFooterElement>;
            "s-cnt-market-favorite-products": LocalJSX.SCntMarketFavoriteProducts & JSXBase.HTMLAttributes<HTMLSCntMarketFavoriteProductsElement>;
            "s-cnt-market-first-page": LocalJSX.SCntMarketFirstPage & JSXBase.HTMLAttributes<HTMLSCntMarketFirstPageElement>;
            "s-cnt-market-footer": LocalJSX.SCntMarketFooter & JSXBase.HTMLAttributes<HTMLSCntMarketFooterElement>;
            "s-cnt-market-footer-info": LocalJSX.SCntMarketFooterInfo & JSXBase.HTMLAttributes<HTMLSCntMarketFooterInfoElement>;
            "s-cnt-market-footer-info-item": LocalJSX.SCntMarketFooterInfoItem & JSXBase.HTMLAttributes<HTMLSCntMarketFooterInfoItemElement>;
            "s-cnt-market-footer-items": LocalJSX.SCntMarketFooterItems & JSXBase.HTMLAttributes<HTMLSCntMarketFooterItemsElement>;
            "s-cnt-market-footer-modal-form": LocalJSX.SCntMarketFooterModalForm & JSXBase.HTMLAttributes<HTMLSCntMarketFooterModalFormElement>;
            "s-cnt-market-header": LocalJSX.SCntMarketHeader & JSXBase.HTMLAttributes<HTMLSCntMarketHeaderElement>;
            "s-cnt-market-header-base": LocalJSX.SCntMarketHeaderBase & JSXBase.HTMLAttributes<HTMLSCntMarketHeaderBaseElement>;
            "s-cnt-market-header-body": LocalJSX.SCntMarketHeaderBody & JSXBase.HTMLAttributes<HTMLSCntMarketHeaderBodyElement>;
            "s-cnt-market-header-nav": LocalJSX.SCntMarketHeaderNav & JSXBase.HTMLAttributes<HTMLSCntMarketHeaderNavElement>;
            "s-cnt-market-header-wrapper": LocalJSX.SCntMarketHeaderWrapper & JSXBase.HTMLAttributes<HTMLSCntMarketHeaderWrapperElement>;
            "s-cnt-market-item-choice": LocalJSX.SCntMarketItemChoice & JSXBase.HTMLAttributes<HTMLSCntMarketItemChoiceElement>;
            "s-cnt-market-item-courier": LocalJSX.SCntMarketItemCourier & JSXBase.HTMLAttributes<HTMLSCntMarketItemCourierElement>;
            "s-cnt-market-item-offer": LocalJSX.SCntMarketItemOffer & JSXBase.HTMLAttributes<HTMLSCntMarketItemOfferElement>;
            "s-cnt-market-item-recommended": LocalJSX.SCntMarketItemRecommended & JSXBase.HTMLAttributes<HTMLSCntMarketItemRecommendedElement>;
            "s-cnt-market-item-selection": LocalJSX.SCntMarketItemSelection & JSXBase.HTMLAttributes<HTMLSCntMarketItemSelectionElement>;
            "s-cnt-market-item-specialist": LocalJSX.SCntMarketItemSpecialist & JSXBase.HTMLAttributes<HTMLSCntMarketItemSpecialistElement>;
            "s-cnt-market-item-statistics": LocalJSX.SCntMarketItemStatistics & JSXBase.HTMLAttributes<HTMLSCntMarketItemStatisticsElement>;
            "s-cnt-market-left-menu-catalog": LocalJSX.SCntMarketLeftMenuCatalog & JSXBase.HTMLAttributes<HTMLSCntMarketLeftMenuCatalogElement>;
            "s-cnt-market-login-and-registration-form": LocalJSX.SCntMarketLoginAndRegistrationForm & JSXBase.HTMLAttributes<HTMLSCntMarketLoginAndRegistrationFormElement>;
            "s-cnt-market-login-form": LocalJSX.SCntMarketLoginForm & JSXBase.HTMLAttributes<HTMLSCntMarketLoginFormElement>;
            "s-cnt-market-modal-window": LocalJSX.SCntMarketModalWindow & JSXBase.HTMLAttributes<HTMLSCntMarketModalWindowElement>;
            "s-cnt-market-offer": LocalJSX.SCntMarketOffer & JSXBase.HTMLAttributes<HTMLSCntMarketOfferElement>;
            "s-cnt-market-ordering": LocalJSX.SCntMarketOrdering & JSXBase.HTMLAttributes<HTMLSCntMarketOrderingElement>;
            "s-cnt-market-ordering-column": LocalJSX.SCntMarketOrderingColumn & JSXBase.HTMLAttributes<HTMLSCntMarketOrderingColumnElement>;
            "s-cnt-market-ordering-contacts": LocalJSX.SCntMarketOrderingContacts & JSXBase.HTMLAttributes<HTMLSCntMarketOrderingContactsElement>;
            "s-cnt-market-ordering-final": LocalJSX.SCntMarketOrderingFinal & JSXBase.HTMLAttributes<HTMLSCntMarketOrderingFinalElement>;
            "s-cnt-market-ordering-header": LocalJSX.SCntMarketOrderingHeader & JSXBase.HTMLAttributes<HTMLSCntMarketOrderingHeaderElement>;
            "s-cnt-market-ordering-method": LocalJSX.SCntMarketOrderingMethod & JSXBase.HTMLAttributes<HTMLSCntMarketOrderingMethodElement>;
            "s-cnt-market-ordering-payment": LocalJSX.SCntMarketOrderingPayment & JSXBase.HTMLAttributes<HTMLSCntMarketOrderingPaymentElement>;
            "s-cnt-market-ordering-payment-online": LocalJSX.SCntMarketOrderingPaymentOnline & JSXBase.HTMLAttributes<HTMLSCntMarketOrderingPaymentOnlineElement>;
            "s-cnt-market-ordering-payment-transfer": LocalJSX.SCntMarketOrderingPaymentTransfer & JSXBase.HTMLAttributes<HTMLSCntMarketOrderingPaymentTransferElement>;
            "s-cnt-market-ordering-replacement-policy": LocalJSX.SCntMarketOrderingReplacementPolicy & JSXBase.HTMLAttributes<HTMLSCntMarketOrderingReplacementPolicyElement>;
            "s-cnt-market-ordering-replacements": LocalJSX.SCntMarketOrderingReplacements & JSXBase.HTMLAttributes<HTMLSCntMarketOrderingReplacementsElement>;
            "s-cnt-market-ordering-sidebar": LocalJSX.SCntMarketOrderingSidebar & JSXBase.HTMLAttributes<HTMLSCntMarketOrderingSidebarElement>;
            "s-cnt-market-ordering-time-of-receipt": LocalJSX.SCntMarketOrderingTimeOfReceipt & JSXBase.HTMLAttributes<HTMLSCntMarketOrderingTimeOfReceiptElement>;
            "s-cnt-market-ordering-time-panel-item": LocalJSX.SCntMarketOrderingTimePanelItem & JSXBase.HTMLAttributes<HTMLSCntMarketOrderingTimePanelItemElement>;
            "s-cnt-market-ordering-time-panel-tab": LocalJSX.SCntMarketOrderingTimePanelTab & JSXBase.HTMLAttributes<HTMLSCntMarketOrderingTimePanelTabElement>;
            "s-cnt-market-orders-wrapper": LocalJSX.SCntMarketOrdersWrapper & JSXBase.HTMLAttributes<HTMLSCntMarketOrdersWrapperElement>;
            "s-cnt-market-pickup-in-modal": LocalJSX.SCntMarketPickupInModal & JSXBase.HTMLAttributes<HTMLSCntMarketPickupInModalElement>;
            "s-cnt-market-product": LocalJSX.SCntMarketProduct & JSXBase.HTMLAttributes<HTMLSCntMarketProductElement>;
            "s-cnt-market-product-filter-said-bar": LocalJSX.SCntMarketProductFilterSaidBar & JSXBase.HTMLAttributes<HTMLSCntMarketProductFilterSaidBarElement>;
            "s-cnt-market-product-page": LocalJSX.SCntMarketProductPage & JSXBase.HTMLAttributes<HTMLSCntMarketProductPageElement>;
            "s-cnt-market-products-list": LocalJSX.SCntMarketProductsList & JSXBase.HTMLAttributes<HTMLSCntMarketProductsListElement>;
            "s-cnt-market-products-list-card": LocalJSX.SCntMarketProductsListCard & JSXBase.HTMLAttributes<HTMLSCntMarketProductsListCardElement>;
            "s-cnt-market-products-list-item": LocalJSX.SCntMarketProductsListItem & JSXBase.HTMLAttributes<HTMLSCntMarketProductsListItemElement>;
            "s-cnt-market-products-slider": LocalJSX.SCntMarketProductsSlider & JSXBase.HTMLAttributes<HTMLSCntMarketProductsSliderElement>;
            "s-cnt-market-products-slider-card": LocalJSX.SCntMarketProductsSliderCard & JSXBase.HTMLAttributes<HTMLSCntMarketProductsSliderCardElement>;
            "s-cnt-market-promo-slider": LocalJSX.SCntMarketPromoSlider & JSXBase.HTMLAttributes<HTMLSCntMarketPromoSliderElement>;
            "s-cnt-market-promo-slider-card": LocalJSX.SCntMarketPromoSliderCard & JSXBase.HTMLAttributes<HTMLSCntMarketPromoSliderCardElement>;
            "s-cnt-market-recently-watched": LocalJSX.SCntMarketRecentlyWatched & JSXBase.HTMLAttributes<HTMLSCntMarketRecentlyWatchedElement>;
            "s-cnt-market-recently-watched-card": LocalJSX.SCntMarketRecentlyWatchedCard & JSXBase.HTMLAttributes<HTMLSCntMarketRecentlyWatchedCardElement>;
            "s-cnt-market-recommended": LocalJSX.SCntMarketRecommended & JSXBase.HTMLAttributes<HTMLSCntMarketRecommendedElement>;
            "s-cnt-market-registration-form": LocalJSX.SCntMarketRegistrationForm & JSXBase.HTMLAttributes<HTMLSCntMarketRegistrationFormElement>;
            "s-cnt-market-remind-password": LocalJSX.SCntMarketRemindPassword & JSXBase.HTMLAttributes<HTMLSCntMarketRemindPasswordElement>;
            "s-cnt-market-selection": LocalJSX.SCntMarketSelection & JSXBase.HTMLAttributes<HTMLSCntMarketSelectionElement>;
            "s-cnt-market-shipments": LocalJSX.SCntMarketShipments & JSXBase.HTMLAttributes<HTMLSCntMarketShipmentsElement>;
            "s-cnt-market-shop": LocalJSX.SCntMarketShop & JSXBase.HTMLAttributes<HTMLSCntMarketShopElement>;
            "s-cnt-market-specialist": LocalJSX.SCntMarketSpecialist & JSXBase.HTMLAttributes<HTMLSCntMarketSpecialistElement>;
            "s-cnt-market-specification": LocalJSX.SCntMarketSpecification & JSXBase.HTMLAttributes<HTMLSCntMarketSpecificationElement>;
            "s-cnt-market-statistics": LocalJSX.SCntMarketStatistics & JSXBase.HTMLAttributes<HTMLSCntMarketStatisticsElement>;
            "s-cnt-market-store-select-top": LocalJSX.SCntMarketStoreSelectTop & JSXBase.HTMLAttributes<HTMLSCntMarketStoreSelectTopElement>;
            "s-cnt-market-top-bar": LocalJSX.SCntMarketTopBar & JSXBase.HTMLAttributes<HTMLSCntMarketTopBarElement>;
            "s-cnt-market-up-footer": LocalJSX.SCntMarketUpFooter & JSXBase.HTMLAttributes<HTMLSCntMarketUpFooterElement>;
            "s-cnt-market-up-footer-form": LocalJSX.SCntMarketUpFooterForm & JSXBase.HTMLAttributes<HTMLSCntMarketUpFooterFormElement>;
            "s-cnt-market-user-account": LocalJSX.SCntMarketUserAccount & JSXBase.HTMLAttributes<HTMLSCntMarketUserAccountElement>;
        }
    }
}
